#!/usr/bin/env node
import{resolve as g}from"path";import s from"fs-extra";import B from"ora";import J from"inquirer";import P from"path";import{fileURLToPath as R}from"url";import M from"figlet";var L=R(import.meta.url),F=P.dirname(L),y=P.join(F,"../"),C=M.textSync("Create V3 App",{font:"Epic"}),A="my-v3-app",I="create-v3-app";import w from"chalk";import V from"gradient-string";var O=()=>{let t=V(Object.values(["#2ef232","#00e96b","#00dd96","#00d0b8","#00c1d2","#00b1e0","#00a0e3","#008ddb","#007bc9"]));console.log(t.multiline(C))},m=(...t)=>w.red(...t),h=(...t)=>w.yellow(...t),u=(...t)=>w.cyan(...t),d=(...t)=>w.green(...t),r={error(...t){console.log(m(...t))},warn(...t){console.log(h(...t))},info(...t){console.log(u(...t))},success(...t){console.log(d(...t))}};var q=async({projectName:t,projectDir:n},e)=>{if(!s.existsSync(n))return;if(s.readdirSync(n).length===0&&!(t===".")){e.info(`${u(t)} exists but is empty, continuing...
`);return}e.stopAndPersist();let{shouldAbort:i}=await J.prompt({name:"shouldAbort",type:"list",message:`${h("Warning:")} ${h(t)} already exists and isn't empty. How would you like to proceed?`,choices:[{name:"Abort installation (recommended)",value:!0,short:"Abort"},{name:"Clear the directory and continue installation",value:!1,short:"Clear"}],default:!0});i&&(e.fail("Aborting installation..."),process.exit(1)),e.info(`Emptying ${u(t)} and creating t3 app..
`),s.emptyDirSync(n)},H=t=>{s.readdirSync(t).forEach(e=>{e.startsWith("_")&&s.renameSync(g(t,e),g(t,`.${e.slice(1)}`))})},K=(t,n)=>{if(!n)return;let e=n==="."?"my-v3-app":n,o=g(t,"package.json"),a=s.readJSONSync(o);a.name=e,s.writeJSONSync(o,a,{spaces:2})},S=async({projectName:t,projectDir:n,layers:e})=>{let o=B(`Creating project in: ${n}...
`).start();await q({projectName:t,projectDir:n},o),o.start();let a=g(y,"template");if(s.copySync(a,n),H(n),K(n,t),!e.cvaUi){let l=g(n,"src/layers/ui");s.rmSync(l,{recursive:!0,force:!0})}let i=t==="."?"App":u(t);o.succeed(`${i} ${d("scaffolded successfully!")}
`)};import j from"chalk";import{execSync as b}from"child_process";import{execa as f}from"execa";import E from"fs-extra";import G from"inquirer";import X from"ora";import v from"path";var Y=t=>{try{return b("git --version",{cwd:t}),!0}catch{return!1}},Q=t=>E.existsSync(v.join(t,".git")),Z=async t=>{try{return await f("git",["rev-parse","--is-inside-work-tree"],{cwd:t,stdout:"ignore"}),!0}catch{return!1}},D=()=>{let n=b("git --version").toString().trim().split(" ")[2],[e,o]=n?.split(".")||[0,0];return{major:Number(e),minor:Number(o)}},tt=()=>b("git config --global init.defaultBranch || echo main").toString().trim(),nt=async(t,n)=>{if(!Q(t))return!1;let o=await Z(t),a=v.parse(t).name;if(o){n.stop();let{overwriteGit:i}=await G.prompt({name:"overwriteGit",type:"confirm",message:`${m("Warning:")} Git is already initialized in "${a}". Initializing a new git repository would delete the previous history. Would you like to continue anyways?`,default:!1});return i&&E.removeSync(v.join(t,".git")),!i}else{n.stop();let{initializeChildGitRepo:i}=await G.prompt({name:"initializeChildGitRepo",type:"confirm",message:`${m("Warning:")} "${a}" is already in a git worktree. Would you still like to initialize a new git repository in this directory?`,default:!1});return!i}},T=async t=>{if(r.info("Initializing Git..."),!Y(t)){r.warn("Git is not installed. Skipping Git initialization.");return}let n=X(`Creating a new git repo...
`).start();if(await nt(t,n)){n.info("Skipping git initialization...");return}try{let o=tt(),{major:a,minor:i}=D();a<2||i<28?(await f("git",["init"],{cwd:t}),await f("git",["branch","-m",o],{cwd:t})):await f("git",["init",`--initial-branch=${o}`],{cwd:t}),await f("git",["add","."],{cwd:t}),n.succeed(`${d("Successfully initialized and staged")} ${j.green.bold("git")}
`)}catch{n.fail(`${m("Failed:")} could not initialize git. Update git to the latest version!
`)}};import rt from"chalk";import{execa as x}from"execa";import k from"ora";import{resolve as et,basename as ot}from"path";var c=()=>{let t=process.env.npm_config_user_agent;return t?.startsWith("yarn")?"yarn":t?.startsWith("pnpm")?"pnpm":"npm"},it=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,_=t=>{let n=t.split("/"),e=n.findIndex(a=>a.startsWith("@")),o=n[n.length-1];return n.findIndex(a=>a.startsWith("@"))!==-1&&(o=n.slice(e).join("/")),t==="."||it.test(o??"")?!0:"App name must consist of only lowercase alphanumeric characters, '-', and '_'"},$=t=>{let n=t.split("/"),e=n[n.length-1];if(e==="."){let i=et(process.cwd());e=ot(i)}let o=n.findIndex(i=>i.startsWith("@"));o!==-1&&(e=n.slice(o).join("/"));let a=n.filter(i=>!i.startsWith("@")).join("/");return[e,a]};var at=async t=>(await x("npm",["install"],{cwd:t,stderr:"inherit"}),k()),st=async t=>{let n=k("Running yarn...").start(),e=x("yarn",[],{cwd:t,stdout:"pipe"});return await new Promise((o,a)=>{e.stdout?.on("data",i=>{n.text=i.toString()}),e.on("error",i=>a(i)),e.on("close",()=>o())}),n},lt=async t=>{let n=k("Running pnpm install...").start(),e=x("pnpm",["install"],{cwd:t,stdout:"pipe"});return await new Promise((o,a)=>{e.stdout?.on("data",i=>{let l=i.toString();l.includes("Progress")&&(n.text=l.includes("|")?l.split(" | ")[1]??"":l)}),e.on("error",i=>a(i)),e.on("close",()=>o())}),n},ct=async(t,n)=>{switch(t){case"npm":return at(n);case"pnpm":return lt(n);case"yarn":return st(n)}},U=async t=>{r.info("Installing dependencies...");let n=c();(await ct(n,t)).succeed(rt.green(`Successfully installed dependencies!
`))};var W=(t,n)=>{let e=c();r.info("Next steps:"),t!=="."&&r.info(`  cd ${t}`),n.noInstall&&r.info(`  ${e} ${e==="yarn"?"":"install"}`),r.info(`  ${e==="npm"?"npx":e} prisma db push`),r.info(`  ${e==="npm"?"npm run":e} dev`)};import{Command as pt}from"commander";import p from"inquirer";import mt from"asciify-image";import{resolve as ut}from"path";var N={name:A,noGit:!1,noInstall:!1,layers:{cvaUi:!1}},dt=async()=>{if(!(process.env.SHELL?.toLowerCase().includes("git")&&process.env.SHELL?.includes("bash")))return{interactive:!0,shouldContinue:!0};r.warn(`WARNING: It looks like you are using Git Bash which is non-interactive. In order to provide options with the interactive CLI, please run create-v3t3-app with another
      terminal.`);let{shouldContinue:n}=await p.prompt({name:"shouldContinue",type:"confirm",message:"Continue scaffolding a default V3 app?",default:!0});return{interactive:!1,shouldContinue:n}},gt=()=>{let t=new pt().name(I);return t.description("A CLI for creating web applications with the v3 stack").argument("[dir]","The name of the application, as well as the name of the directory to create").option("--noGit","Explicitly tell the CLI to not initialize a new git repo in the project",!1).option("--noInstall","Explicitly tell the CLI to not run the package manager's install command",!1).parse(process.argv),{...t.opts(),name:t.args[0]}},ft=async()=>{let{name:t}=await p.prompt({name:"name",type:"input",message:"What will your project be called?",default:N.name,validate:_,transformer:n=>n.trim()});return t},yt=async()=>{let{git:t}=await p.prompt({name:"git",type:"confirm",message:"Initialize a new git repository?",default:!0});return t},wt=async()=>{let t=c(),{install:n}=await p.prompt({name:"install",type:"confirm",message:`Would you like us to run '${t}`+(t==="yarn"?"'?":" install'?"),default:!0});return n},ht=async()=>{let t=gt();return Object.assign(t,{name:t.name||await ft(),noGit:t.noGit||!await yt(),noInstall:t.noGit||!await wt(),layers:{}})},vt=async()=>{let{language:t}=await p.prompt({name:"language",type:"list",message:"Which styling solutions would you like to use ?",choices:[{name:"Open Props",value:"openprops",short:"openprops"},{name:"Tailwind",value:"tailwind",short:"tailwind"}],default:"openprops"});if(t==="tailwind"){let n=await mt(ut(y,"src/assets/duck.jpg"),{fit:"box",width:20,height:20});console.log(n),r.info("Wrong choice"),r.info("Create V3 App believes in web fundamentals and doesn't support tailwind out of the box."),r.info("See https://create-v3-app.vercel.app/docs/why-no-tailwind"),r.info("Don't worry, you can easily setup tailwind yourself by adding the tailwind nuxt module.")}},bt=async()=>{r.info("Would you like to add CVA-UI to jumpstart your component authoring?"),r.info("This will add a baseline set of components to solve common UI patterns in the src/layers/ui directory"),r.info("This is not a library. After intstallation, the code will be yours: Feel free to tweak, modify, enhance of even delete whatever you want !");let{cvaUi:t}=await p.prompt({name:"cvaUi",type:"confirm",message:"Add CVA UI ?",default:!0});return t},z=async()=>{let{shouldContinue:t,interactive:n}=await dt();t||process.exit(0);let e=n?await ht():N;return await vt(),e.layers.cvaUi=await bt(),e};(async function(){O();let t=await z(),[n,e]=$(t.name);await S({projectName:n,projectDir:e,layers:t.layers}),t.noInstall||await U(e),t.noGit||await T(e),W(n,t),process.exit(0)})().catch(t=>{r.error("Aborting installation..."),t instanceof Error?r.error(t):(r.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(t)),process.exit(1)});
//# sourceMappingURL=index.js.map