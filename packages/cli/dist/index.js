#!/usr/bin/env node
import{resolve as h}from"path";import a from"fs-extra";import B from"ora";import K from"inquirer";import v from"path";import{fileURLToPath as M}from"url";import L from"figlet";var U=M(import.meta.url),F=v.dirname(U),k=v.join(F,"../"),C=L.textSync("Create V3 App",{font:"Epic"}),A="my-v3-app",I="create-v3-app";import f from"chalk";import V from"gradient-string";var G=()=>{let t=V(Object.values(["#2ef232","#00e96b","#00dd96","#00d0b8","#00c1d2","#00b1e0","#00a0e3","#008ddb","#007bc9"]));console.log(t.multiline(C))},c=(...t)=>f.red(...t),w=(...t)=>f.yellow(...t),p=(...t)=>f.cyan(...t),m=(...t)=>f.green(...t),i={error(...t){console.log(c(...t))},warn(...t){console.log(w(...t))},info(...t){console.log(p(...t))},success(...t){console.log(m(...t))}};var q=async({projectName:t,projectDir:n},e)=>{if(!a.existsSync(n))return;if(console.log(n),a.readdirSync(n).length===0&&!(t===".")){e.info(`${p(t)} exists but is empty, continuing...
`);return}e.stopAndPersist();let{shouldAbort:o}=await K.prompt({name:"shouldAbort",type:"list",message:`${w("Warning:")} ${w(t)} already exists and isn't empty. How would you like to proceed?`,choices:[{name:"Abort installation (recommended)",value:!0,short:"Abort"},{name:"Clear the directory and continue installation",value:!1,short:"Clear"}],default:!0});o&&(e.fail("Aborting installation..."),process.exit(1)),e.info(`Emptying ${p(t)} and creating t3 app..
`),a.emptyDirSync(n)},H=t=>{a.readdirSync(t).forEach(e=>{e.startsWith("_")&&a.renameSync(h(t,e),h(t,`.${e.slice(1)}`))})},O=async({projectName:t,projectDir:n})=>{let e=B(`Creating project in: ${n}...
`).start();await q({projectName:t,projectDir:n},e),e.start();let r=h(k,"template");a.copySync(r,n),H(n);let s=t==="."?"App":p(t);e.succeed(`${s} ${m("scaffolded successfully!")}
`)};import j from"chalk";import{execSync as b}from"child_process";import{execa as u}from"execa";import E from"fs-extra";import S from"inquirer";import X from"ora";import y from"path";var Y=t=>{try{return b("git --version",{cwd:t}),!0}catch{return!1}},J=t=>E.existsSync(y.join(t,".git")),Q=async t=>{try{return await u("git",["rev-parse","--is-inside-work-tree"],{cwd:t,stdout:"ignore"}),!0}catch{return!1}},Z=()=>{let n=b("git --version").toString().trim().split(" ")[2],[e,r]=n?.split(".")||[0,0];return{major:Number(e),minor:Number(r)}},D=()=>b("git config --global init.defaultBranch || echo main").toString().trim(),tt=async(t,n)=>{if(!J(t))return!1;let r=await Q(t),s=y.parse(t).name;if(r){n.stop();let{overwriteGit:o}=await S.prompt({name:"overwriteGit",type:"confirm",message:`${c("Warning:")} Git is already initialized in "${s}". Initializing a new git repository would delete the previous history. Would you like to continue anyways?`,default:!1});return o&&E.removeSync(y.join(t,".git")),!o}else{n.stop();let{initializeChildGitRepo:o}=await S.prompt({name:"initializeChildGitRepo",type:"confirm",message:`${c("Warning:")} "${s}" is already in a git worktree. Would you still like to initialize a new git repository in this directory?`,default:!1});return!o}},$=async t=>{if(i.info("Initializing Git..."),!Y(t)){i.warn("Git is not installed. Skipping Git initialization.");return}let n=X(`Creating a new git repo...
`).start();if(await tt(t,n)){n.info("Skipping git initialization...");return}try{let r=D(),{major:s,minor:o}=Z();s<2||o<28?(await u("git",["init"],{cwd:t}),await u("git",["branch","-m",r],{cwd:t})):await u("git",["init",`--initial-branch=${r}`],{cwd:t}),await u("git",["add","."],{cwd:t}),n.succeed(`${m("Successfully initialized and staged")} ${j.green.bold("git")}
`)}catch{n.fail(`${c("Failed:")} could not initialize git. Update git to the latest version!
`)}};import it from"chalk";import{execa as x}from"execa";import P from"ora";import{resolve as nt,basename as et}from"path";var l=()=>{let t=process.env.npm_config_user_agent;return t?.startsWith("yarn")?"yarn":t?.startsWith("pnpm")?"pnpm":"npm"},ot=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,_=t=>{let n=t.split("/"),e=n.findIndex(s=>s.startsWith("@")),r=n[n.length-1];return n.findIndex(s=>s.startsWith("@"))!==-1&&(r=n.slice(e).join("/")),t==="."||ot.test(r??"")?!0:"App name must consist of only lowercase alphanumeric characters, '-', and '_'"},T=t=>{let n=t.split("/"),e=n[n.length-1];if(e==="."){let o=nt(process.cwd());e=et(o)}let r=n.findIndex(o=>o.startsWith("@"));r!==-1&&(e=n.slice(r).join("/"));let s=n.filter(o=>!o.startsWith("@")).join("/");return[e,s]};var rt=async t=>(await x("npm",["install"],{cwd:t,stderr:"inherit"}),P()),st=async t=>{let n=P("Running yarn...").start(),e=x("yarn",[],{cwd:t,stdout:"pipe"});return await new Promise((r,s)=>{e.stdout?.on("data",o=>{n.text=o.toString()}),e.on("error",o=>s(o)),e.on("close",()=>r())}),n},at=async t=>{let n=P("Running pnpm install...").start(),e=x("pnpm",["install"],{cwd:t,stdout:"pipe"});return await new Promise((r,s)=>{e.stdout?.on("data",o=>{let d=o.toString();d.includes("Progress")&&(n.text=d.includes("|")?d.split(" | ")[1]??"":d)}),e.on("error",o=>s(o)),e.on("close",()=>r())}),n},lt=async(t,n)=>{switch(t){case"npm":return rt(n);case"pnpm":return at(n);case"yarn":return st(n)}},W=async t=>{i.info("Installing dependencies...");let n=l();(await lt(n,t)).succeed(it.green(`Successfully installed dependencies!
`))};var z=(t,n)=>{let e=l();i.info("Next steps:"),t!=="."&&i.info(`  cd ${t}`),n.noInstall&&i.info(`  ${e} ${e==="yarn"?"":"install"}`),i.info(`  ${e==="npm"?"npx":e} prisma db push`),i.info(`  ${e==="npm"?"npm run":e} dev`)};import{Command as ct}from"commander";import g from"inquirer";import pt from"asciify-image";import{resolve as mt}from"path";var N={name:A,noGit:!1,noInstall:!1},ut=async()=>{if(!(process.env.SHELL?.toLowerCase().includes("git")&&process.env.SHELL?.includes("bash")))return{interactive:!0,shouldContinue:!0};i.warn(`WARNING: It looks like you are using Git Bash which is non-interactive. In order to provide options with the interactive CLI, please run create-v3t3-app with another
      terminal.`);let{shouldContinue:n}=await g.prompt({name:"shouldContinue",type:"confirm",message:"Continue scaffolding a default V3 app?",default:!0});return{interactive:!1,shouldContinue:n}},gt=()=>{let t=new ct().name(I);return t.description("A CLI for creating web applications with the v3 stack").argument("[dir]","The name of the application, as well as the name of the directory to create").option("--noGit","Explicitly tell the CLI to not initialize a new git repo in the project",!1).option("--noInstall","Explicitly tell the CLI to not run the package manager's install command",!1).parse(process.argv),t.opts()},dt=async()=>{let{name:t}=await g.prompt({name:"name",type:"input",message:"What will your project be called?",default:N.name,validate:_,transformer:n=>n.trim()});return t},ft=async()=>{let{git:t}=await g.prompt({name:"git",type:"confirm",message:"Initialize a new git repository?",default:!0});return t},wt=async()=>{let t=l(),{install:n}=await g.prompt({name:"install",type:"confirm",message:`Would you like us to run '${t}`+(t==="yarn"?"'?":" install'?"),default:!0});return n},ht=async()=>{let t=gt();return Object.assign(t,{name:t.name||await dt(),noGit:t.noGit||!await ft(),noInstall:t.noGit||!await wt()})},yt=async()=>{let{language:t}=await g.prompt({name:"language",type:"list",message:"Which styling solutions would you like to use ?",choices:[{name:"Open Props",value:"openprops",short:"openprops"},{name:"Tailwind",value:"tailwind",short:"tailwind"}],default:"openprops"});if(t==="tailwind"){let n=await pt(mt(process.cwd(),"src/assets/duck.jpg"),{fit:"box",width:20,height:20});console.log(n),i.info("Wrong choice KEKW"),i.info("Create V3 App believes in web fundamentals and doesn't support tailwind out of the box."),i.info("Don't worry, you can easily setup tailwind yourself by adding the tailwind nuxt module.")}else i.success("Ah, I see you are a person of culture.")},R=async()=>{let{shouldContinue:t,interactive:n}=await ut();t||process.exit(0);let e=n?await ht():N;return await yt(),e};(async function(){G();let t=await R(),[n,e]=T(t.name);await O({projectName:n,projectDir:e}),t.noInstall||await W(e),t.noGit||await $(e),z(n,t),process.exit(0)})().catch(t=>{i.error("Aborting installation..."),t instanceof Error?i.error(t):(i.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(t)),process.exit(1)});
//# sourceMappingURL=index.js.map