{"version":3,"sources":["../src/createProject.ts","../src/constants.ts","../src/gui.ts","../src/git.ts","../src/installDependencies.ts","../src/utils.ts","../src/logNextSteps.ts","../src/userOptions.ts","../src/index.ts"],"sourcesContent":["import { resolve } from 'path';\r\nimport fs from 'fs-extra';\r\nimport ora, { Ora } from 'ora';\r\nimport inquirer from 'inquirer';\r\nimport { PKG_ROOT } from './constants.js';\r\nimport { info, success, warn } from './gui.js';\r\n\r\nexport type CreateProjectOptions = {\r\n  projectName?: string;\r\n  projectDir: string;\r\n};\r\n\r\nconst cleanupProjectDir = async (\r\n  { projectName, projectDir }: CreateProjectOptions,\r\n  spinner: Ora\r\n) => {\r\n  if (!fs.existsSync(projectDir)) return;\r\n\r\n  console.log(projectDir);\r\n  const isEmpty = fs.readdirSync(projectDir).length === 0;\r\n  const isCwd = projectName === '.';\r\n\r\n  if (isEmpty && !isCwd) {\r\n    spinner.info(`${info(projectName)} exists but is empty, continuing...\\n`);\r\n    return;\r\n  }\r\n\r\n  spinner.stopAndPersist();\r\n\r\n  const { shouldAbort } = await inquirer.prompt<{\r\n    shouldAbort: boolean;\r\n  }>({\r\n    name: 'shouldAbort',\r\n    type: 'list',\r\n    message: `${warn('Warning:')} ${warn(\r\n      projectName\r\n    )} already exists and isn't empty. How would you like to proceed?`,\r\n    choices: [\r\n      {\r\n        name: 'Abort installation (recommended)',\r\n        value: true,\r\n        short: 'Abort'\r\n      },\r\n      {\r\n        name: 'Clear the directory and continue installation',\r\n        value: false,\r\n        short: 'Clear'\r\n      }\r\n    ],\r\n    default: true\r\n  });\r\n\r\n  if (shouldAbort) {\r\n    spinner.fail('Aborting installation...');\r\n    process.exit(1);\r\n  }\r\n\r\n  spinner.info(`Emptying ${info(projectName)} and creating t3 app..\\n`);\r\n  fs.emptyDirSync(projectDir);\r\n};\r\n\r\nconst renameDotFiles = (projectDir: string) => {\r\n  const files = fs.readdirSync(projectDir);\r\n  files.forEach(file => {\r\n    if (!file.startsWith('_')) return;\r\n    fs.renameSync(\r\n      resolve(projectDir, file),\r\n      resolve(projectDir, `.${file.slice(1)}`)\r\n    );\r\n  });\r\n};\r\n\r\nexport const createProject = async ({\r\n  projectName,\r\n  projectDir\r\n}: CreateProjectOptions) => {\r\n  const spinner = ora(`Creating project in: ${projectDir}...\\n`).start();\r\n\r\n  await cleanupProjectDir({ projectName, projectDir }, spinner);\r\n\r\n  spinner.start();\r\n\r\n  const srcDir = resolve(PKG_ROOT, 'template');\r\n  fs.copySync(srcDir, projectDir);\r\n  renameDotFiles(projectDir);\r\n\r\n  const scaffoldedName = projectName === '.' ? 'App' : info(projectName);\r\n\r\n  spinner.succeed(`${scaffoldedName} ${success('scaffolded successfully!')}\\n`);\r\n};\r\n","import path from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport figlet from 'figlet';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst distPath = path.dirname(__filename);\r\n\r\nexport const PKG_ROOT = path.join(distPath, '../');\r\n\r\nexport const TITLE_TEXT = figlet.textSync('Create V3 App', {\r\n  font: 'Epic'\r\n});\r\nexport const DEFAULT_APP_NAME = 'my-v3-app';\r\nexport const CREATE_V3_APP = 'create-v3-app';\r\n","import chalk from 'chalk';\r\nimport gradientString from 'gradient-string';\r\nimport { TITLE_TEXT } from './constants.js';\r\n\r\nexport const renderTitle = () => {\r\n  const gradient = gradientString(\r\n    Object.values([\r\n      '#2ef232',\r\n      '#00e96b',\r\n      '#00dd96',\r\n      '#00d0b8',\r\n      '#00c1d2',\r\n      '#00b1e0',\r\n      '#00a0e3',\r\n      '#008ddb',\r\n      '#007bc9'\r\n    ])\r\n  );\r\n\r\n  console.log(gradient.multiline(TITLE_TEXT));\r\n};\r\n\r\nexport const error = (...args: unknown[]) => {\r\n  return chalk.red(...args);\r\n};\r\nexport const warn = (...args: unknown[]) => {\r\n  return chalk.yellow(...args);\r\n};\r\nexport const info = (...args: unknown[]) => {\r\n  return chalk.cyan(...args);\r\n};\r\nexport const success = (...args: unknown[]) => {\r\n  return chalk.green(...args);\r\n};\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(error(...args));\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(warn(...args));\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(info(...args));\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(success(...args));\r\n  }\r\n};\r\n","import chalk from 'chalk';\r\nimport { execSync } from 'child_process';\r\nimport { execa } from 'execa';\r\nimport fs from 'fs-extra';\r\nimport inquirer from 'inquirer';\r\nimport ora, { type Ora } from 'ora';\r\nimport path from 'path';\r\nimport { error, logger, success } from './gui.js';\r\n\r\nconst isGitInstalled = (dir: string): boolean => {\r\n  try {\r\n    execSync('git --version', { cwd: dir });\r\n    return true;\r\n  } catch (_e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isRootGitRepo = (dir: string): boolean => {\r\n  return fs.existsSync(path.join(dir, '.git'));\r\n};\r\n\r\nconst isInsideGitRepo = async (dir: string): Promise<boolean> => {\r\n  try {\r\n    await execa('git', ['rev-parse', '--is-inside-work-tree'], {\r\n      cwd: dir,\r\n      stdout: 'ignore'\r\n    });\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getGitVersion = () => {\r\n  const stdout = execSync('git --version').toString().trim();\r\n  const gitVersionTag = stdout.split(' ')[2];\r\n  const [major, minor] = gitVersionTag?.split('.') || [0, 0];\r\n\r\n  return { major: Number(major), minor: Number(minor) };\r\n};\r\n\r\nconst getDefaultBranch = () => {\r\n  const stdout = execSync('git config --global init.defaultBranch || echo main')\r\n    .toString()\r\n    .trim();\r\n\r\n  return stdout;\r\n};\r\n\r\nconst checkExistingRepo = async (\r\n  projectDir: string,\r\n  spinner: Ora\r\n): Promise<boolean> => {\r\n  const isRoot = isRootGitRepo(projectDir);\r\n  if (!isRoot) return false;\r\n\r\n  const isInside = await isInsideGitRepo(projectDir);\r\n  const dirName = path.parse(projectDir).name; // skip full path for logging\r\n\r\n  if (isInside) {\r\n    spinner.stop();\r\n    const { overwriteGit } = await inquirer.prompt<{\r\n      overwriteGit: boolean;\r\n    }>({\r\n      name: 'overwriteGit',\r\n      type: 'confirm',\r\n      message: `${error(\r\n        'Warning:'\r\n      )} Git is already initialized in \"${dirName}\". Initializing a new git repository would delete the previous history. Would you like to continue anyways?`,\r\n      default: false\r\n    });\r\n    if (overwriteGit) {\r\n      fs.removeSync(path.join(projectDir, '.git'));\r\n    }\r\n\r\n    return !overwriteGit;\r\n  } else {\r\n    spinner.stop();\r\n    const { initializeChildGitRepo } = await inquirer.prompt<{\r\n      initializeChildGitRepo: boolean;\r\n    }>({\r\n      name: 'initializeChildGitRepo',\r\n      type: 'confirm',\r\n      message: `${error(\r\n        'Warning:'\r\n      )} \"${dirName}\" is already in a git worktree. Would you still like to initialize a new git repository in this directory?`,\r\n      default: false\r\n    });\r\n\r\n    return !initializeChildGitRepo;\r\n  }\r\n};\r\n\r\nexport const initializeGit = async (projectDir: string) => {\r\n  logger.info('Initializing Git...');\r\n\r\n  if (!isGitInstalled(projectDir)) {\r\n    logger.warn('Git is not installed. Skipping Git initialization.');\r\n    return;\r\n  }\r\n\r\n  const spinner = ora('Creating a new git repo...\\n').start();\r\n\r\n  const shouldAbort = await checkExistingRepo(projectDir, spinner);\r\n  if (shouldAbort) {\r\n    spinner.info('Skipping git initialization...');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const branchName = getDefaultBranch();\r\n\r\n    const { major, minor } = getGitVersion();\r\n    if (major < 2 || minor < 28) {\r\n      await execa('git', ['init'], { cwd: projectDir });\r\n      await execa('git', ['branch', '-m', branchName], { cwd: projectDir });\r\n    } else {\r\n      await execa('git', ['init', `--initial-branch=${branchName}`], {\r\n        cwd: projectDir\r\n      });\r\n    }\r\n    await execa('git', ['add', '.'], { cwd: projectDir });\r\n    spinner.succeed(\r\n      `${success('Successfully initialized and staged')} ${chalk.green.bold(\r\n        'git'\r\n      )}\\n`\r\n    );\r\n  } catch (err) {\r\n    spinner.fail(\r\n      `${error(\r\n        'Failed:'\r\n      )} could not initialize git. Update git to the latest version!\\n`\r\n    );\r\n  }\r\n};\r\n","import chalk from 'chalk';\r\nimport { execa } from 'execa';\r\nimport ora, { type Ora } from 'ora';\r\nimport { logger } from './gui.js';\r\nimport { PackageManager, getUserPkgManager } from './utils.js';\r\n\r\ntype InstallFunction = (projectDir: string) => Promise<Ora>;\r\n\r\nconst installWithNpm: InstallFunction = async projectDir => {\r\n  await execa('npm', ['install'], {\r\n    cwd: projectDir,\r\n    stderr: 'inherit'\r\n  });\r\n\r\n  return ora();\r\n};\r\n\r\nconst installWithYarn: InstallFunction = async projectDir => {\r\n  const spinner = ora('Running yarn...').start();\r\n  const yarnSubprocess = execa('yarn', [], {\r\n    cwd: projectDir,\r\n    stdout: 'pipe'\r\n  });\r\n\r\n  await new Promise<void>((res, rej) => {\r\n    yarnSubprocess.stdout?.on('data', (data: Buffer) => {\r\n      spinner.text = data.toString();\r\n    });\r\n    yarnSubprocess.on('error', e => rej(e));\r\n    yarnSubprocess.on('close', () => res());\r\n  });\r\n\r\n  return spinner;\r\n};\r\n\r\nconst installWithPnpm: InstallFunction = async projectDir => {\r\n  const spinner = ora('Running pnpm install...').start();\r\n  const pnpmSubprocess = execa('pnpm', ['install'], {\r\n    cwd: projectDir,\r\n    stdout: 'pipe'\r\n  });\r\n\r\n  await new Promise<void>((res, rej) => {\r\n    pnpmSubprocess.stdout?.on('data', (data: Buffer) => {\r\n      const text = data.toString();\r\n\r\n      if (text.includes('Progress')) {\r\n        spinner.text = text.includes('|') ? text.split(' | ')[1] ?? '' : text;\r\n      }\r\n    });\r\n    pnpmSubprocess.on('error', e => rej(e));\r\n    pnpmSubprocess.on('close', () => res());\r\n  });\r\n\r\n  return spinner;\r\n};\r\n\r\nconst runInstallCommand = async (\r\n  pkgManager: PackageManager,\r\n  projectDir: string\r\n): Promise<Ora> => {\r\n  switch (pkgManager) {\r\n    case 'npm':\r\n      return installWithNpm(projectDir);\r\n    case 'pnpm':\r\n      return installWithPnpm(projectDir);\r\n    case 'yarn':\r\n      return installWithYarn(projectDir);\r\n  }\r\n};\r\n\r\nexport const installDependencies = async (projectDir: string) => {\r\n  logger.info('Installing dependencies...');\r\n  const pkgManager = getUserPkgManager();\r\n\r\n  const installSpinner = await runInstallCommand(pkgManager, projectDir);\r\n\r\n  installSpinner.succeed(chalk.green('Successfully installed dependencies!\\n'));\r\n};\r\n","import { resolve, basename } from 'path';\r\n\r\nexport type PackageManager = 'npm' | 'pnpm' | 'yarn';\r\n\r\nexport const getUserPkgManager: () => PackageManager = () => {\r\n  const userAgent = process.env.npm_config_user_agent;\r\n\r\n  if (userAgent?.startsWith('yarn')) return 'yarn';\r\n  if (userAgent?.startsWith('pnpm')) return 'pnpm';\r\n  return 'npm';\r\n};\r\n\r\nconst validationRegExp =\r\n  /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/;\r\n\r\nexport const validateAppName = (input: string) => {\r\n  const paths = input.split('/');\r\n\r\n  const indexOfDelimiter = paths.findIndex(p => p.startsWith('@'));\r\n\r\n  let appName = paths[paths.length - 1];\r\n  if (paths.findIndex(p => p.startsWith('@')) !== -1) {\r\n    appName = paths.slice(indexOfDelimiter).join('/');\r\n  }\r\n\r\n  if (input === '.' || validationRegExp.test(appName ?? '')) {\r\n    return true;\r\n  } else {\r\n    return \"App name must consist of only lowercase alphanumeric characters, '-', and '_'\";\r\n  }\r\n};\r\n\r\nexport const parseNameAndPath = (input: string) => {\r\n  const paths = input.split('/');\r\n\r\n  let appName = paths[paths.length - 1];\r\n\r\n  if (appName === '.') {\r\n    const parsedCwd = resolve(process.cwd());\r\n    appName = basename(parsedCwd);\r\n  }\r\n\r\n  // If the first part is a @, it's a scoped package\r\n  const indexOfDelimiter = paths.findIndex(p => p.startsWith('@'));\r\n  if (indexOfDelimiter !== -1) {\r\n    appName = paths.slice(indexOfDelimiter).join('/');\r\n  }\r\n\r\n  const path = paths.filter(p => !p.startsWith('@')).join('/');\r\n\r\n  return [appName, path] as const;\r\n};\r\n","import { logger } from './gui.js';\r\nimport { CliOptions } from './userOptions.js';\r\nimport { getUserPkgManager } from './utils.js';\r\n\r\nexport const logNextSteps = (projectName: string, options: CliOptions) => {\r\n  const pkgManager = getUserPkgManager();\r\n  logger.info('Next steps:');\r\n  projectName !== '.' && logger.info(`  cd ${projectName}`);\r\n  options.noInstall &&\r\n    logger.info(`  ${pkgManager} ${pkgManager === 'yarn' ? '' : 'install'}`);\r\n  logger.info(`  ${pkgManager === 'npm' ? 'npx' : pkgManager} prisma db push`);\r\n  logger.info(`  ${pkgManager === 'npm' ? 'npm run' : pkgManager} dev`);\r\n};\r\n","import { Command } from 'commander';\r\nimport { Merge } from 'type-fest';\r\nimport inquirer from 'inquirer';\r\nimport asciify from 'asciify-image';\r\nimport { resolve } from 'path';\r\nimport { CREATE_V3_APP, DEFAULT_APP_NAME } from './constants.js';\r\nimport { getUserPkgManager, validateAppName } from './utils.js';\r\nimport { logger } from './gui.js';\r\n\r\nexport type CliOptions = {\r\n  name: string;\r\n  noGit: boolean;\r\n  noInstall: boolean;\r\n};\r\n\r\nconst defaults: CliOptions = {\r\n  name: DEFAULT_APP_NAME,\r\n  noGit: false,\r\n  noInstall: false\r\n};\r\n\r\nconst checkInteractive = async () => {\r\n  const isNonInteractive =\r\n    process.env.SHELL?.toLowerCase().includes('git') &&\r\n    process.env.SHELL?.includes('bash');\r\n\r\n  if (!isNonInteractive) {\r\n    return {\r\n      interactive: true,\r\n      shouldContinue: true\r\n    };\r\n  }\r\n\r\n  logger.warn(`WARNING: It looks like you are using Git Bash which is non-interactive. In order to provide options with the interactive CLI, please run create-v3t3-app with another\r\n      terminal.`);\r\n\r\n  const { shouldContinue } = await inquirer.prompt<{\r\n    shouldContinue: boolean;\r\n  }>({\r\n    name: 'shouldContinue',\r\n    type: 'confirm',\r\n    message: `Continue scaffolding a default V3 app?`,\r\n    default: true\r\n  });\r\n\r\n  return { interactive: false, shouldContinue };\r\n};\r\n\r\nconst getCliArgs = (): Merge<CliOptions, { name: string | undefined }> => {\r\n  const program = new Command().name(CREATE_V3_APP);\r\n  program\r\n    .description('A CLI for creating web applications with the v3 stack')\r\n    .argument(\r\n      '[dir]',\r\n      'The name of the application, as well as the name of the directory to create'\r\n    )\r\n    .option(\r\n      '--noGit',\r\n      'Explicitly tell the CLI to not initialize a new git repo in the project',\r\n      false\r\n    )\r\n    .option(\r\n      '--noInstall',\r\n      \"Explicitly tell the CLI to not run the package manager's install command\",\r\n      false\r\n    )\r\n    .parse(process.argv);\r\n\r\n  return program.opts();\r\n};\r\n\r\nconst promptAppName = async (): Promise<string> => {\r\n  const { name } = await inquirer.prompt<Pick<CliOptions, 'name'>>({\r\n    name: 'name',\r\n    type: 'input',\r\n    message: 'What will your project be called?',\r\n    default: defaults.name,\r\n    validate: validateAppName,\r\n    transformer: (input: string) => {\r\n      return input.trim();\r\n    }\r\n  });\r\n\r\n  return name;\r\n};\r\n\r\nconst promptGit = async (): Promise<boolean> => {\r\n  const { git } = await inquirer.prompt<{ git: boolean }>({\r\n    name: 'git',\r\n    type: 'confirm',\r\n    message: 'Initialize a new git repository?',\r\n    default: true\r\n  });\r\n\r\n  return git;\r\n};\r\n\r\nconst promptInstall = async (): Promise<boolean> => {\r\n  const pkgManager = getUserPkgManager();\r\n\r\n  const { install } = await inquirer.prompt<{ install: boolean }>({\r\n    name: 'install',\r\n    type: 'confirm',\r\n    message:\r\n      `Would you like us to run '${pkgManager}` +\r\n      (pkgManager === 'yarn' ? `'?` : ` install'?`),\r\n    default: true\r\n  });\r\n\r\n  return install;\r\n};\r\n\r\nconst runCli = async () => {\r\n  const cliArgs = getCliArgs();\r\n\r\n  const options = Object.assign(cliArgs, {\r\n    name: cliArgs.name || (await promptAppName()),\r\n    noGit: cliArgs.noGit || !(await promptGit()),\r\n    noInstall: cliArgs.noGit || !(await promptInstall())\r\n  });\r\n\r\n  return options;\r\n};\r\n\r\nconst promptTailwind = async () => {\r\n  const { language } = await inquirer.prompt<{ language: string }>({\r\n    name: 'language',\r\n    type: 'list',\r\n    message: 'Which styling solutions would you like to use ?',\r\n    choices: [\r\n      { name: 'Open Props', value: 'openprops', short: 'openprops' },\r\n      { name: 'Tailwind', value: 'tailwind', short: 'tailwind' }\r\n    ],\r\n    default: 'openprops'\r\n  });\r\n\r\n  if (language === 'tailwind') {\r\n    const duck = await asciify(resolve(process.cwd(), 'src/assets/duck.jpg'), {\r\n      fit: 'box',\r\n      width: 20,\r\n      height: 20\r\n    });\r\n    console.log(duck);\r\n    logger.info('Wrong choice KEKW');\r\n    logger.info(\r\n      \"Create V3 App believes in web fundamentals and doesn't support tailwind out of the box.\"\r\n    );\r\n    logger.info(\r\n      \"Don't worry, you can easily setup tailwind yourself by adding the tailwind nuxt module.\"\r\n    );\r\n  } else {\r\n    logger.success('Ah, I see you are a person of culture.');\r\n  }\r\n};\r\n\r\nexport const getUserOptions = async (): Promise<CliOptions> => {\r\n  const { shouldContinue, interactive } = await checkInteractive();\r\n  if (!shouldContinue) process.exit(0);\r\n\r\n  const options = interactive ? await runCli() : defaults;\r\n  await promptTailwind();\r\n\r\n  return options;\r\n};\r\n","#!/usr/bin/env node\r\n\r\nimport { createProject } from './createProject.js';\r\nimport { initializeGit } from './git.js';\r\nimport { logger, renderTitle } from './gui.js';\r\nimport { installDependencies } from './installDependencies.js';\r\nimport { logNextSteps } from './logNextSteps.js';\r\nimport { getUserOptions } from './userOptions.js';\r\nimport { parseNameAndPath } from './utils.js';\r\n\r\n(async function () {\r\n  renderTitle();\r\n  const options = await getUserOptions();\r\n  const [projectName, projectDir] = parseNameAndPath(options.name);\r\n\r\n  await createProject({ projectName, projectDir });\r\n\r\n  if (!options.noInstall) {\r\n    await installDependencies(projectDir);\r\n  }\r\n\r\n  if (!options.noGit) {\r\n    await initializeGit(projectDir);\r\n  }\r\n\r\n  logNextSteps(projectName as string, options);\r\n\r\n  process.exit(0);\r\n})().catch(err => {\r\n  logger.error('Aborting installation...');\r\n  if (err instanceof Error) {\r\n    logger.error(err);\r\n  } else {\r\n    logger.error(\r\n      'An unknown error has occurred. Please open an issue on github with the below:'\r\n    );\r\n    console.log(err);\r\n  }\r\n  process.exit(1);\r\n});\r\n"],"mappings":"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","names":["resolve","fs","ora","inquirer","path","fileURLToPath","figlet","__filename","distPath","PKG_ROOT","TITLE_TEXT","DEFAULT_APP_NAME","CREATE_V3_APP","chalk","gradientString","renderTitle","gradient","gradientString","TITLE_TEXT","error","args","chalk","warn","info","success","logger","cleanupProjectDir","projectName","projectDir","spinner","fs","info","shouldAbort","inquirer","warn","renameDotFiles","file","resolve","createProject","ora","srcDir","PKG_ROOT","scaffoldedName","success","chalk","execSync","execa","fs","inquirer","ora","path","isGitInstalled","dir","execSync","isRootGitRepo","fs","path","isInsideGitRepo","execa","getGitVersion","gitVersionTag","major","minor","getDefaultBranch","checkExistingRepo","projectDir","spinner","isInside","dirName","overwriteGit","inquirer","error","initializeChildGitRepo","initializeGit","logger","ora","branchName","success","chalk","chalk","execa","ora","resolve","basename","getUserPkgManager","userAgent","validationRegExp","validateAppName","input","paths","indexOfDelimiter","p","appName","parseNameAndPath","parsedCwd","path","installWithNpm","projectDir","execa","ora","installWithYarn","spinner","yarnSubprocess","res","rej","data","e","installWithPnpm","pnpmSubprocess","text","runInstallCommand","pkgManager","installDependencies","logger","getUserPkgManager","chalk","logNextSteps","projectName","options","pkgManager","getUserPkgManager","logger","Command","inquirer","asciify","resolve","defaults","DEFAULT_APP_NAME","checkInteractive","logger","shouldContinue","inquirer","getCliArgs","program","Command","CREATE_V3_APP","promptAppName","name","validateAppName","input","promptGit","git","promptInstall","pkgManager","getUserPkgManager","install","runCli","cliArgs","promptTailwind","language","duck","asciify","resolve","getUserOptions","interactive","options","renderTitle","options","getUserOptions","projectName","projectDir","parseNameAndPath","createProject","installDependencies","initializeGit","logNextSteps","err","logger"]}