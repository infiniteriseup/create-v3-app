---
import type { MarkdownHeading } from 'astro';
import type { ToCEntry } from '../types';
import TableOfContentEntry from './TableOfContentEntry.astro';

export interface Props {
  headings: MarkdownHeading[];
  class?: string;
}

const { class: className, headings } = Astro.props;

const headingsWithChildren: ToCEntry[] = [];

headings.forEach((heading, index) => {
  const prev = headingsWithChildren[index - 1];
  const entry: ToCEntry = { ...heading, children: [] };
  headingsWithChildren.push(entry);

  if (!prev) return;
  if (prev.depth < entry.depth) {
    prev.children.push(entry);
    entry.parent = prev;
  } else if (prev.depth === entry.depth) {
    entry.parent = prev.parent;
    prev.parent?.children.push(entry);
  }
});

const rootHeadings = headingsWithChildren.filter(heading => !heading.parent);
---

<script>
  class TableOfContent extends HTMLElement {
    constructor() {
      super();
      this.bindLinks();
    }

    bindLinks() {
      this.querySelectorAll<HTMLAnchorElement>('a').forEach(link => {
        const targetEl = document.getElementById(
          new URL(link.href).hash.slice(1) // remove # sign
        );
        if (!targetEl) return;

        new IntersectionObserver(entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              link.dataset.inViewport = 'true';
            } else {
              link.dataset.inViewport = 'false';
              link.dataset.active = 'false';
            }
            const visibleElements = [
              ...this.querySelectorAll<HTMLAnchorElement>(
                '[data-in-viewport="true"]'
              )
            ];

            visibleElements.forEach((el, index) => {
              el.dataset.active = String(index === 0);
            });
          });
        }).observe(targetEl!);
      });
    }
  }

  customElements.define('table-of-content', TableOfContent);
</script>

<Fragment>
  <h2>On this page</h2>
  <table-of-content>
    <ul class={className}>
      {
        rootHeadings.map(heading => (
          <TableOfContentEntry entry={heading} depth={0} />
        ))
      }
    </ul>
  </table-of-content>
</Fragment>

<style>
  @import 'open-props/media';

  h2 {
    font-size: var(--font-size-3);
    font-weight: var(--font-weight-5);
    margin-block-end: var(--size-4);
    @media (--md-n-below) {
      display: none;
    }
  }

  ul {
    padding-left: var(--size-2);
    list-style: none;
  }
</style>
