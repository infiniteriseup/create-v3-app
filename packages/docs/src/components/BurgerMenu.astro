---
import Container from './Container.astro';
import { Sprite } from 'astro-icon';
import MainNavigation from './MainNavigation.astro';
---

<script>
  const burgerMenu = document.querySelector<HTMLElement>('.burger-menu')!;
  const burgerInput = document.getElementById(
    'menu-toggle'
  )! as HTMLInputElement;
  const burgerToggles =
    document.querySelectorAll<HTMLElement>('[data-menu-toggle]');
  const overlay = document.querySelector<HTMLElement>('.burger-menu-overlay')!;

  function getMenuFocusableElements() {
    return [
      ...burgerMenu.querySelectorAll<HTMLElement>(
        'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])'
      )
    ].filter(
      el => !el.hasAttribute('disabled') && !el.getAttribute('aria-hidden')
    );
  }

  function handleCloseOnEscape(e: KeyboardEvent) {
    if (e.code === 'Escape') {
      burgerInput.checked = false;
    }
  }
  function handleToggleKeyup(el: HTMLElement) {
    el.addEventListener('keyup', e => {
      if (e.code === 'Enter') el.click();
    });
  }

  function handleInputChange(e: Event) {
    const target = e.target as HTMLInputElement;
    if (target.checked) {
      getMenuFocusableElements()[0].focus();
    } else {
      burgerToggles[0].focus();
    }
  }

  function handleMenuClickOutside(e: MouseEvent) {
    const target = e.target as HTMLElement;
    const isInside = burgerMenu === target || burgerMenu.contains(target);
    const isInsideToggle = [...burgerToggles].some(
      toggle => toggle === target || toggle.contains(target)
    );

    if (!isInside && !isInsideToggle && burgerInput !== target) {
      burgerInput.checked = false;
    }
  }

  function trapFocusInsideMenu(e: KeyboardEvent) {
    if (e.code !== 'Tab') return;
    const focusableElements = getMenuFocusableElements();
    const firstEl = focusableElements[0];
    const lastEl = focusableElements.at(-1);
    if (e.shiftKey) {
      if (document.activeElement === firstEl) {
        lastEl?.focus();
        e.preventDefault();
      }
    } else {
      if (document.activeElement === lastEl) {
        firstEl.focus();
        e.preventDefault();
      }
    }
  }

  function initAnimations() {
    overlay.classList.remove('inactive');
    overlay.style.visibility = 'hidden';

    burgerMenu.addEventListener(
      'animationend',
      () => (overlay.style.visibility = 'visible'),
      { once: true }
    );
  }

  burgerToggles.forEach(handleToggleKeyup);
  burgerInput.addEventListener('change', handleInputChange);
  burgerMenu.addEventListener('keydown', trapFocusInsideMenu);
  document.addEventListener('click', handleMenuClickOutside);
  window.addEventListener('keyup', handleCloseOnEscape);
  document.addEventListener('DOMContentLoaded', initAnimations);
</script>

<label
  aria-label="toggle menu"
  title="toggle menu"
  for="menu-toggle"
  tabindex="0"
  role="button"
  data-menu-toggle
>
  <Sprite name="mdi:menu" />
</label>
<input type="checkbox" class="sr-only" id="menu-toggle" tabindex="-1" />

<div class="burger-menu-overlay inactive">
  <div class="burger-menu">
    <header>
      <h2>Menu</h2>
      <label
        aria-label="toggle menu"
        title="toggle menu"
        for="menu-toggle"
        tabindex="0"
        role="button"
        data-menu-toggle
      >
        <Sprite name="mdi:close" class="close" />
      </label>
    </header>
    <MainNavigation />
  </div>
</div>

<style>
  @import 'open-props/media';

  #menu-toggle:not(:checked) + .burger-menu-overlay {
    animation: var(--animation-fade-out) forwards;
    background-color: transparent;
    pointer-events: none;

    & .burger-menu {
      animation: var(--animation-slide-out-left);
      animation-fill-mode: forwards;

      & :global(*) {
        display: none !important;
      }
    }
  }

  .burger-menu-overlay {
    background: hsl(var(--gray-11-hsl) / 0.7);
    position: fixed;
    inset: 0;
    z-index: 1;
    transition: background-color 0.3s;

    @media (--md-n-above) {
      display: none;
    }
  }

  .burger-menu {
    width: 80%;
    height: 100%;
    background-color: var(--surface-1);
    padding: var(--size-1) var(--size-3);
    animation: var(--animation-slide-in-right);
    animation-timing-function: var(--size-3);
    animation-duration: 0.3s;
    @supports (display: flex) {
      .flex-container > * {
        text-shadow: 0 0 2px blue;
        float: none;
      }

      .flex-container {
        display: flex;
      }
    }

    & header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-block-end: var(--size-3);
      padding-block-end: var(--size-3);
      border-bottom: solid 1px var(--surface-4);
    }

    & h2 {
      font-size: var(--font-size-4);
    }
  }

  .burger-menu-overlay.inactive {
    transition: none;
    & .burger-menu {
      animation-duration: 0s !important;
    }
  }

  .close {
    width: var(--size-7);
    aspect-ratio: 1;
  }
</style>
